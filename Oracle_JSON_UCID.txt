请介绍如何在Oracle 19c DB中增删改查 JSON 数据？

 总结：
 - 创建表时，使用`IS JSON`约束来确保存储的是有效的JSON。
 - 插入数据直接使用INSERT语句。
 - 查询时，使用`JSON_VALUE`、`JSON_QUERY`和`JSON_TABLE`等函数。
 - 更新时，推荐使用`JSON_MERGEPATCH`或`JSON_TRANSFORM`（19.7+）。
 - 删除JSON中的字段，使用`JSON_TRANSFORM`的REMOVE操作。
 注意：`JSON_TRANSFORM`在19.7版本中引入，如果版本低于19.7，则无法使用。因此，在编写更新语句时，需要根据数据库版本选择合适的函数。
 另外，Oracle 19c还提供了其他JSON函数，如`JSON_EXISTS`（用于检查路径是否存在）、`JSON_DATAGUIDE`（用于生成JSON的结构信息）等，可以根据需要进一步学习。

在Oracle 19c中，JSON数据以二进制格式存储在BLOB、CLOB或VARCHAR2列中，并通过内置函数操作。以下是核心操作指南：
1. 创建支持JSON的表
sql

CREATE TABLE employees (
    id NUMBER PRIMARY KEY,
    json_data CLOB,  -- 使用CLOB存储JSON
    CONSTRAINT ensure_json CHECK (json_data IS JSON)  -- 验证JSON有效性
);

2. 插入JSON数据
sql

-- 插入单条记录
INSERT INTO employees (id, json_data) VALUES (
    1,
    '{
        "name": "张三",
        "age": 30,
        "position": "开发工程师",
        "skills": ["Java", "SQL"],
        "contact": {"email": "zhangsan@example.com", "phone": "123-4567"}
    }'
);

-- 批量插入
INSERT INTO employees VALUES (2, '{"name": "李四", "age": 25}');

3. 查询JSON数据
提取标量值（JSON_VALUE）
sql

SELECT 
    id,
    JSON_VALUE(json_data, '$.name') AS name,
    JSON_VALUE(json_data, '$.age' RETURNING NUMBER) AS age
FROM employees;

提取对象/数组（JSON_QUERY）
sql

SELECT 
    JSON_QUERY(json_data, '$.contact') AS contact,
    JSON_QUERY(json_data, '$.skills' WITH WRAPPER) AS skills_array
FROM employees;

检查路径存在（JSON_EXISTS）
sql

SELECT *
FROM employees
WHERE JSON_EXISTS(json_data, '$.contact.email');

转换为表格（JSON_TABLE）
sql

SELECT e.id, j.*
FROM employees e,
     JSON_TABLE(e.json_data, '$' COLUMNS (
         name VARCHAR2(50) PATH '$.name',
         age NUMBER PATH '$.age',
         email VARCHAR2(100) PATH '$.contact.email'
     )) j;

4. 更新JSON数据
替换整个文档
sql

UPDATE employees
SET json_data = '{"name": "张三", "age": 31}'  -- 新JSON
WHERE id = 1;

修改部分字段（JSON_MERGEPATCH）
sql

UPDATE employees
SET json_data = JSON_MERGEPATCH(
    json_data,  -- 原JSON
    '{"age": 31, "position": "高级工程师"}'  -- 更新字段
)
WHERE id = 1;

追加数组元素（JSON_TRANSFORM - 需19.7+）
sql

UPDATE employees
SET json_data = JSON_TRANSFORM(
    json_data,
    APPEND '$.skills' = 'Oracle'  -- 追加技能
)
WHERE id = 1;

5. 删除JSON数据
删除文档中的字段
sql

UPDATE employees
SET json_data = JSON_TRANSFORM(
    json_data,
    REMOVE '$.contact.phone'  -- 删除phone字段
)
WHERE id = 1;

删除整条记录
sql

DELETE FROM employees WHERE id = 2;

关键注意事项

    性能优化：

        对频繁查询的路径创建JSON搜索索引：
        sql

        CREATE INDEX idx_name ON employees (JSON_VALUE(json_data, '$.name'));

        使用物化视图加速复杂查询。

    数据验证：

        建表时使用IS JSON约束确保数据合法性。

        插入前用JSON_SERIALIZE()验证格式。

    版本差异：

        JSON_TRANSFORM需Oracle 19.7+，低版本用JSON_MERGEPATCH或PL/SQL解析。

    路径语法：

        使用$表示根节点，$.key访问属性，$[0]访问数组元素。

示例综合操作
sql

-- 1. 插入
INSERT INTO employees VALUES (3, '{"name": "王五", "projects": ["OA系统"]}');

-- 2. 更新：追加项目并添加邮箱
UPDATE employees
SET json_data = JSON_TRANSFORM(
    json_data,
    APPEND '$.projects' = 'CRM平台',
    SET '$.contact.email' = 'wangwu@example.com'
)
WHERE id = 3;

-- 3. 查询：检索有邮箱的用户
SELECT id, JSON_VALUE(json_data, '$.name') AS name
FROM employees
WHERE JSON_EXISTS(json_data, '$.contact.email');

通过以上操作，可高效管理Oracle中的JSON数据。建议结合Oracle官方JSON文档进一步探索高级功能。

-----------------------------------------------------------------------------------
Q: I rebased my feature branch on master, my local feature branch is up to date, but
 when I push it to remote, it told me that the remote and local feature diverged 
 and couldn't be pushed, what should I do, can I delete the remote feature branch 
 then push it again?
 
When you encounter a "remote and local diverged" error after rebasing, it's because the
 rebase rewrote your commit history, making it incompatible with the remote branch. 
 Here's how to resolve it:
  Safe Solution: Force Push (Recommended)

Force push your branch to overwrite the remote history (use --force-with-lease for safety):

 $ git push --force-with-lease origin your-feature-branch

--force-with-lease ensures you don't accidentally overwrite others' commits (safer than --force).

If this fails due to new remote commits, fetch first:

 $ git fetch origin your-feature-branch
 $ git push --force-with-lease origin your-feature-branch

Alternative: Delete & Re-push (Use Sparingly)

Only do this if you're certain no one else is using the branch:

# Delete the remote branch
 $ git push origin --delete your-feature-branch

# Re-push your local branch
 $ git push origin your-feature-branch

?? Risks:

    Disrupts open PRs linked to the branch.

    May break colleagues' local references to the branch.

    Requires re-creating branch protections if any.

Why This Happened

    Rebasing replaces old commits with new ones (new commit IDs).

    The remote branch still points to the old commits → history divergence.

Best Practices

    Prefer force-pushing over delete/re-push to preserve PRs and references.

    Warn your team before force-pushing if others use the branch.

    Avoid rebasing public branches shared with others.

If Others Use the Branch

Coordinate with them! They'll need to:

$ git fetch origin
$ git reset --hard origin/your-feature-branch  # WARNING: discards their local changes

Use force push (--force-with-lease) unless you have a specific reason to delete the remote branch.